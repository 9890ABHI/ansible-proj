---
- name: Create AWS EC2 Instances and Store IPs
  hosts: localhost
  gather_facts: yes
  vars:
    aws_region: "us-east-1"
    instance_type: "t2.micro"
    ami_id: "{{ lookup('env', 'IMAGE_NAME') }}" # Replace with your desired AMI ID
    key_name: "{{ lookup('env', 'KEY_NAME') }}" # Replace with your AWS key pair name
    subnet_id: "{{ lookup('env', 'SUBNET_NAME') }}" # Replace with your subnet ID
    num_computes: 1

  tasks:
    - name: Initialize compute_instances list
      set_fact:
        compute_instances: []

    - name: Define compute instance names
      set_fact:
        compute_instances: "{{ compute_instances + ['compute' ~ item] }}"
      loop: "{{ range(1, num_computes + 1) }}"

    - name: Define all instance names
      set_fact:
        all_instances: >
          [
            { "name": "master" }
            {% for instance in compute_instances %}
            , { "name": "{{ instance }}" }
            {% endfor %}
          ]

    - name: Launch EC2 instances
      community.aws.ec2_instance:
        name: "{{ item.name }}"
        image_id: "{{ ami_id }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        region: "{{ aws_region }}"
        subnet_id: "{{ subnet_id }}"
        security_groups: launch-wizard-11
        wait: yes
        count: 1
        tags:
          Name: "{{ item.name }}"
      loop: "{{ all_instances }}"
      register: ec2_instances

    # #

    #     - name: Create a list of hostnames and IPs
    #       set_fact:
    #         instances_info: >
    #           {%- set instances = [] -%}
    #           {%- for result in ec2_instances.results -%}
    #             {%- for instance in result.instances -%}
    #               {%- set _ = instances.append({ 'name': instance.tags.Name, 'private_ip': instance.private_ip_address }) -%}
    #             {%- endfor -%}
    #           {%- endfor -%}
    #           {{ instances }}

    #     - name: Wait for instances to be reachable
    #       wait_for:
    #         host: "{{ item.private_ip }}"
    #         port: 22
    #         state: started
    #         delay: 120  # Increased delay to ensure instances are fully initialized
    #       loop: "{{ instances_info }}"
    #       delegate_to: localhost

    #     - name: Print instance info for debugging
    #       debug:
    #         msg: "Instance: {{ item.name }}, IP: {{ item.private_ip }}"
    #       loop: "{{ instances_info }}"

    #     - name: Set hostname using alternative method
    #       delegate_to: "{{ item.private_ip }}"
    #       command: |
    #         sudo bash -c 'echo "{{ item.name }}" > /etc/hostname'
    #         sudo hostname "{{ item.name }}"
    #       loop: "{{ instances_info }}"
    #       vars:
    #         ansible_ssh_private_key_file: /root/.ssh/boot-1.pem
    #         ansible_ssh_user: ubuntu
    #         ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    #     - name: Ensure hostname is set correctly
    #       delegate_to: "{{ item.private_ip }}"
    #       command: hostname
    #       loop: "{{ instances_info }}"
    #       vars:
    #         ansible_ssh_private_key_file: /root/.ssh/boot-1.pem
    #         ansible_ssh_user: ubuntu
    #         ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    # #
    #     - name: Create a list of hostnames and IPs
    #       set_fact:
    #         instances_info: >
    #           {%- set instances = [] -%}
    #           {%- for result in ec2_instances.results -%}
    #             {%- for instance in result.instances -%}
    #               {%- set _ = instances.append({ 'name': instance.tags.Name, 'private_ip': instance.private_ip_address }) -%}
    #             {%- endfor -%}
    #           {%- endfor -%}
    #           {{ instances }}

    #     - name: Wait for instances to be reachable
    #       wait_for:
    #         host: "{{ item.private_ip }}"
    #         port: 22
    #         state: started
    #         delay: 60  # Adjust delay as needed
    #       loop: "{{ instances_info }}"
    #       delegate_to: localhost

    #     - name: Set hostname on instances
    #       delegate_to: "{{ item.private_ip }}"
    #       ansible.builtin.hostname:
    #         name: "{{ item.name }}"
    #       loop: "{{ instances_info }}"
    #       vars:
    #         ansible_ssh_private_key_file: /root/.ssh/boot-1.pem
    #         ansible_ssh_user: ubuntu
    #         ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    #     - name: Ensure hostname is set correctly
    #       delegate_to: "{{ item.private_ip }}"
    #       command: hostnamectl set-hostname "{{ item.name }}"
    #       loop: "{{ instances_info }}"
    #       vars:
    #         ansible_ssh_private_key_file: /root/.ssh/boot-1.pem
    #         ansible_ssh_user: ubuntu
    #         ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    # - name: Create a list of hostnames and IPs
    #   set_fact:
    #     instances_info: >
    #       {%- set instances = [] -%}
    #       {%- for result in ec2_instances.results -%}
    #         {%- for instance in result.instances -%}
    #           {%- set _ = instances.append({ 'name': instance.tags.Name, 'private_ip': instance.private_ip_address }) -%}
    #         {%- endfor -%}
    #       {%- endfor -%}
    #       {{ instances }}

    # - name: Wait for instances to be reachable
    #   wait_for:
    #     host: "{{ item.private_ip }}"
    #     port: 22
    #     state: started
    #     delay: 60  # Adjust delay as needed
    #   loop: "{{ instances_info }}"
    #   delegate_to: localhost

    # - name: Set hostname on instances
    #   delegate_to: "{{ item.private_ip }}"
    #   ansible.builtin.hostname:
    #     name: "{{ item.name }}"
    #   loop: "{{ instances_info }}"
    #   vars:
    #     ansible_ssh_private_key_file: /root/.ssh/boot-1.pem
    #     ansible_ssh_user: ubuntu

    # - name: Ensure hostname is set correctly
    #   delegate_to: "{{ item.private_ip }}"
    #   command: hostnamectl set-hostname "{{ item.name }}"
    #   loop: "{{ instances_info }}"
    #   vars:
    #     ansible_ssh_private_key_file: /root/.ssh/boot-1.pem
    #     ansible_ssh_user: ubuntu

    # - name: Set hostname based on tag
    #   ansible.builtin.hostname:
    #     name: "{{ item.Name }}"
    #   delegate_to: "{{ item.name }}"
    #   loop: "{{ all_instances }}"
    # - name: Set hostname based on tag
    #   delegate_to: localhost
    #   block:
    #     - name: Create a list of hostnames and IPs
    #       set_fact:
    #         instances_info: >
    #           {%- set instances = [] -%}
    #           {%- for result in ec2_instances.results -%}
    #             {%- for instance in result.instances -%}
    #               {%- set _ = instances.append({ 'name': instance.tags.Name, 'private_ip': instance.private_ip_address }) -%}
    #             {%- endfor -%}
    #           {%- endfor -%}
    #           {{ instances }}

    #     - name: Set hostname on instances
    #       delegate_to: "{{ item.private_ip }}"
    #       ansible.builtin.hostname:
    #         name: "{{ item.name }}"
    #       loop: "{{ instances_info }}"

    # - name: Ensure hostname is set correctly
    #   delegate_to: "{{ item.private_ip }}"
    #   command: hostnamectl set-hostname "{{ item.name }}"
    #   loop: "{{ instances_info }}"
    # - name: Set hostname based on tag
    #   ansible.builtin.hostname:
    #     name: "{{ item.instances[0].tags.Name }}"
    #   delegate_to: "{{ item.instances[0].private_ip_address }}"
    #   loop: "{{ ec2_instances.results }}"
    #   when: item.instances is defined

    # - name: Ensure correct hostname configuration
    #   command: hostnamectl set-hostname "{{ item.instances[0].tags.Name }}"
    #   delegate_to: "{{ item.instances[0].private_ip_address }}"
    #   loop: "{{ ec2_instances.results }}"
    #   when: item.instances is defined

    - name: Save instance information to file
      ansible.builtin.copy:
        content: |
          {% for instance in ec2_instances.results %}
            {% for inst in instance.instances %}
              {{ inst.tags.Name }} - {{ inst.private_ip_address }}
            {% endfor %}
          {% endfor %}
        dest: "../instance-ips.txt"

    # add ip into /etc/hosts

    - name: Initialize compute_details variable
      set_fact:
        compute_details: []

    - name: Extract compute instance details
      set_fact:
        compute_details: >-
          {{
            compute_details + [{
              'id': item.instances[0].instance_id,
              'private_ip': item.instances[0].private_ip_address,
              'hostname': item.instances[0].tags.Name
            }]
          }}
      loop: "{{ ec2_instances.results }}"
      when: item.instances is defined
      loop_control:
        label: "{{ item.instances[0].tags.Name }}"

    - name: Debug compute_details
      debug:
        var: compute_details

    - name: Add instance details to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item.private_ip }} {{ item.hostname }}"
        state: present
      loop: "{{ compute_details }}"
      become: yes
      delegate_to: localhost

    - name: Save compute details to a JSON file
      copy:
        content: "{{ compute_details | to_nice_json }}"
        dest: "../compute_details.json"

    # -----------

- name: Configure EC2 Instances
  hosts: all # This should refer to your actual EC2 instances
  become: yes
  gather_facts: yes # Gather facts for each instance

  tasks:
    - name: Add instance details to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item.private_ip }} {{ item.hostname }}"
        state: present
      loop: "{{ compute_details }}"
      become: yes

    - name: Set hostname based on private IP for each instance
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Ensure hostname is applied
      shell: "hostnamectl set-hostname {{ inventory_hostname }}"
      args:
        executable: /bin/bash
    # -----------
    # - name: Set hostname based on private IP for each instance
    #   hostname:
    #     name: "{{ item.hostname }}"
    #   loop: "{{ compute_details }}"
    #   become: yes

    # - name: Ensure hostname is applied
    #   shell: "hostnamectl set-hostname {{ item.hostname }}"
    #   args:
    #     executable: /bin/bash
    #   loop: "{{ compute_details }}"
    #   become: yes
    # -----------

    # - name: Set hostname based on private IP for each instance
    #   hostname:
    #     name: "{{ item.hostname }}"
    #   loop: "{{ compute_details }}"
    #   become: yes
    #   remote_user: "{{ ansible_ssh_user }}"
    #   private_key_file: "~/.ssh/{{ key_name }}.pem"
    #   hosts: "{{ item.private_ip }}"

    # - name: Ensure hostname is applied
    #   shell: "hostnamectl set-hostname {{ item.hostname }}"
    #   args:
    #     executable: /bin/bash
    #   loop: "{{ compute_details }}"
    #   become: yes
    #   remote_user: "{{ ansible_ssh_user }}"
    #   private_key_file: "~/.ssh/{{ key_name }}.pem"
    #   hosts: "{{ item.private_ip }}"

    # -----------
    # - name: Set hostname based on private IP for each instance
    #   hostname:
    #     name: "{{ item.hostname }}"
    #   loop: "{{ compute_details }}"
    #   become: yes
    #   delegate_to: "{{ item.private_ip }}"

    # - name: Ensure hostname is applied
    #   shell: "hostnamectl set-hostname {{ item.hostname }}"
    #   args:
    #     executable: /bin/bash
    #   loop: "{{ compute_details }}"
    #   become: yes
    #   delegate_to: "{{ item.private_ip }}"
    # -----------

    # try doing after ward
    # - name: Distribute /etc/hosts to all nodes
    #   delegate_to: localhost
    #   copy:
    #     src: "/etc/hosts"
    #     dest: "/etc/hosts"
    #   loop: "{{ compute_details | map(attribute='private_ip') | list }}"
    #   delegate_to: "{{ item }}"
    #   become: yes
    - name: Create inventory.ini content
      set_fact:
        inventory_content: |
          [master]
          {{ compute_details | selectattr('hostname', 'equalto', 'master') | map(attribute='private_ip') | first }} ansible_ssh_host={{ compute_details | selectattr('hostname', 'equalto', 'master') | map(attribute='private_ip') | first }}

          [compute]
          {% for item in compute_details %}
          {% if item.hostname != 'master' %}
          {{ item.private_ip }} ansible_ssh_host={{ item.private_ip }}
          {% endif %}
          {% endfor %}

    - name: Write inventory.ini file
      copy:
        content: "{{ inventory_content }}"
        dest: "../inventory.ini"
